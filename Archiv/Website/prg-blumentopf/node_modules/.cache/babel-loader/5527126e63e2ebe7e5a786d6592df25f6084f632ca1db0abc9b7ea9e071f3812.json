{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SettingsComponent = _resolveComponent(\"SettingsComponent\");\n  const _component_HeaderComponent = _resolveComponent(\"HeaderComponent\");\n  const _component_SliderComponent = _resolveComponent(\"SliderComponent\");\n  const _component_CardComponent = _resolveComponent(\"CardComponent\");\n  const _component_TabulatorComponent = _resolveComponent(\"TabulatorComponent\");\n  return $data.showSettings ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_SettingsComponent, {\n    onCloseSettings: $options.toggleSettings,\n    onUpdatePlant: $options.updatePlant,\n    plant: $data.selectedPlant,\n    profiles: $data.profiles\n  }, null, 8, [\"onCloseSettings\", \"onUpdatePlant\", \"plant\", \"profiles\"])])) : $data.potData && $data.activeProfile ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_HeaderComponent, {\n    onOpenSettings: $options.toggleSettings,\n    title: $data.activeProfile ? $data.activeProfile.name : '',\n    type: \"pageHeader\"\n  }, null, 8, [\"onOpenSettings\", \"title\"]), _createVNode(_component_CardComponent, null, {\n    default: _withCtx(() => [_createVNode(_component_HeaderComponent, {\n      title: \"Aktuelle Werte:\",\n      type: \"cardHeader\"\n    }), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.potData.sensors, (sensor, index) => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: index\n      }, [_createVNode(_component_SliderComponent, {\n        title: sensor.name,\n        value: sensor.log[sensor.log.length - 1],\n        unit: sensor.unit,\n        boundaries: $data.activeProfile.boundaries[index]\n      }, null, 8, [\"title\", \"value\", \"unit\", \"boundaries\"])]);\n    }), 128))])]),\n    _: 1\n  }), _createVNode(_component_CardComponent, null, {\n    default: _withCtx(() => [_createVNode(_component_HeaderComponent, {\n      title: \"Statistik:\",\n      type: \"cardHeader\"\n    }), _createVNode(_component_TabulatorComponent, {\n      sensors: $data.potData.sensors\n    }, null, 8, [\"sensors\"])]),\n    _: 1\n  }), _createVNode(_component_CardComponent, null, {\n    default: _withCtx(() => [_createElementVNode(\"button\", {\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.uploadJson && $options.uploadJson(...args))\n    }, \"JSON Push\")]),\n    _: 1\n  })])) : _createCommentVNode(\"\", true);\n}","map":{"version":3,"names":["$data","showSettings","_createElementBlock","_hoisted_1","_createVNode","_component_SettingsComponent","onCloseSettings","$options","toggleSettings","onUpdatePlant","updatePlant","plant","selectedPlant","profiles","potData","activeProfile","_hoisted_2","_component_HeaderComponent","onOpenSettings","title","name","type","_component_CardComponent","_createElementVNode","_Fragment","_renderList","sensors","sensor","index","key","_component_SliderComponent","value","log","length","unit","boundaries","_component_TabulatorComponent","onClick","_cache","args","uploadJson"],"sources":["C:\\Users\\Dave\\prg-blumentopf\\src\\App.vue"],"sourcesContent":["<template>\n  <div v-if=\"showSettings\">\n    <SettingsComponent @closeSettings=\"toggleSettings\" @updatePlant=\"updatePlant\" :plant=\"selectedPlant\" :profiles=\"profiles\"></SettingsComponent>\n  </div>\n\n  <div v-else-if=\"potData && activeProfile\">\n    <HeaderComponent @openSettings=\"toggleSettings\" :title=\"activeProfile ? activeProfile.name : ''\" type=\"pageHeader\" />\n\n    <CardComponent>\n      <HeaderComponent title=\"Aktuelle Werte:\" type=\"cardHeader\" />\n      <ul>\n        <li v-for=\"(sensor, index) in potData.sensors\" :key=\"index\">\n          <SliderComponent :title=\"sensor.name\" :value=\"sensor.log[sensor.log.length - 1]\" :unit=\"sensor.unit\" :boundaries=\"activeProfile.boundaries[index]\"></SliderComponent>\n        </li>\n      </ul>\n    </CardComponent>\n\n    <CardComponent>\n      <HeaderComponent title=\"Statistik:\" type=\"cardHeader\" />\n      <TabulatorComponent :sensors=\"potData.sensors\"></TabulatorComponent>\n    </CardComponent>\n\n    <CardComponent>\n      <button @click=\"uploadJson\">JSON Push</button>\n    </CardComponent>\n  </div>\n</template>\n\n<script>\n\nimport HeaderComponent from './components/HeaderComponent.vue'\nimport CardComponent from './components/CardComponent.vue'\nimport SliderComponent from './components/SliderComponent.vue'\nimport TabulatorComponent from './components/TabulatorComponent.vue'\nimport SettingsComponent from './components/SettingsComponent.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HeaderComponent,\n    CardComponent,\n    SliderComponent,\n    TabulatorComponent,\n    SettingsComponent\n},\n  data() {\n    return {\n      showSettings: false,\n      profiles: null,\n      potData: null,\n      selectedPlant: null,\n      activeProfile: null,\n      dbUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/db.json\",\n      potUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/prototyp.json\",\n      testData: { username: \"example\" }\n    }\n  },\n  methods: {\n    toggleSettings() {\n      this.showSettings = !this.showSettings\n    },\n    updatePlant(newPlant) {\n      this.selectedPlant = newPlant\n      this.setActiveProfile()\n    },\n    uploadJson() {\n\n      console.log(\"UPLOAD!!!\")\n      console.log(this.profiles)\n      console.log(this.testData)\n      console.log(JSON.stringify(this.testData))\n\n      fetch(\"https://cloudleo.duckdns.org/Blumentopf/Database/uploadTest.json\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"../Database;charset=utf-8\",\n        },\n        body: JSON.stringify(this.testData)\n      })\n      .then(res => res.JSON())\n      .then(data => console.log(\"Success\", data))\n      .catch(err => console.log(\"Error:\", err.message))\n\n    },\n    setProfiles() {\n      fetch(this.dbUrl)\n        .then(res => res.json())\n        .then(data => {\n          this.profiles = data\n          this.setActiveProfile()\n        })\n        .catch(err => console.log(err.message))\n    },\n    setActiveProfile() {\n      this.activeProfile = this.profiles[this.selectedPlant]\n    }\n  },\n  mounted() {\n    fetch(this.potUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.potData = data\n        this.selectedPlant = this.potData.profile\n        this.setProfiles()\n      })\n      .catch(err => console.log(err.message))\n  }\n}\n</script>\n\n<style>\n#app {\n  --white: #ffffff;\n  --lightGrey: #cccccc;\n  --defaultGrey: #888888;\n  --darkGrey: #444444;\n  --black: #000000;\n  --primary: var(--pal10);\n  --primaryAlt: var(--pal8);\n  --secondary: var(--pal1);\n  --secondaryAlt: var(--pal3);\n  --statGood: #50d025;\n  --statOkay: #f0ed11;\n  --statAlert: #f57913;\n  --statWarning: #d82816;\n\n  --pal1: #582F0E;\n  --pal2: #7F4F24;\n  --pal3: #936639;\n  --pal4: #A68A64;\n  --pal5: #B6AD90;\n  --pal6: #C2C5AA;\n  --pal7: #A4AC86;\n  --pal8: #656D4A;\n  --pal9: #414833;\n  --pal10: #333D29;\n\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--pal6);\n}\n\nul {\n  margin: 0;\n  padding: 0;\n}\n\nli {\n  list-style-type: none;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;SACaA,KAAA,CAAAC,YAAY,I,cAAvBC,mBAAA,CAEM,OAAAC,UAAA,GADJC,YAAA,CAA8IC,4BAAA;IAA1HC,eAAa,EAAEC,QAAA,CAAAC,cAAc;IAAGC,aAAW,EAAEF,QAAA,CAAAG,WAAW;IAAGC,KAAK,EAAEX,KAAA,CAAAY,aAAa;IAAGC,QAAQ,EAAEb,KAAA,CAAAa;8EAGlGb,KAAA,CAAAc,OAAO,IAAId,KAAA,CAAAe,aAAa,I,cAAxCb,mBAAA,CAoBM,OAAAc,UAAA,GAnBJZ,YAAA,CAAqHa,0BAAA;IAAnGC,cAAY,EAAEX,QAAA,CAAAC,cAAc;IAAGW,KAAK,EAAEnB,KAAA,CAAAe,aAAa,GAAGf,KAAA,CAAAe,aAAa,CAACK,IAAI;IAAOC,IAAI,EAAC;4CAEtGjB,YAAA,CAOgBkB,wBAAA;sBANd,MAA6D,CAA7DlB,YAAA,CAA6Da,0BAAA;MAA5CE,KAAK,EAAC,iBAAiB;MAACE,IAAI,EAAC;QAC9CE,mBAAA,CAIK,c,kBAHHrB,mBAAA,CAEKsB,SAAA,QAAAC,WAAA,CAFyBzB,KAAA,CAAAc,OAAO,CAACY,OAAO,GAAjCC,MAAM,EAAEC,KAAK;2BAAzB1B,mBAAA,CAEK;QAF2C2B,GAAG,EAAED;MAAK,IACxDxB,YAAA,CAAqK0B,0BAAA;QAAnJX,KAAK,EAAEQ,MAAM,CAACP,IAAI;QAAGW,KAAK,EAAEJ,MAAM,CAACK,GAAG,CAACL,MAAM,CAACK,GAAG,CAACC,MAAM;QAAQC,IAAI,EAAEP,MAAM,CAACO,IAAI;QAAGC,UAAU,EAAEnC,KAAA,CAAAe,aAAa,CAACoB,UAAU,CAACP,KAAK;;;;MAKtJxB,YAAA,CAGgBkB,wBAAA;sBAFd,MAAwD,CAAxDlB,YAAA,CAAwDa,0BAAA;MAAvCE,KAAK,EAAC,YAAY;MAACE,IAAI,EAAC;QACzCjB,YAAA,CAAoEgC,6BAAA;MAA/CV,OAAO,EAAE1B,KAAA,CAAAc,OAAO,CAACY;;;MAGxCtB,YAAA,CAEgBkB,wBAAA;sBADd,MAA8C,CAA9CC,mBAAA,CAA8C;MAArCc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhC,QAAA,CAAAiC,UAAA,IAAAjC,QAAA,CAAAiC,UAAA,IAAAD,IAAA,CAAU;OAAE,WAAS,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}