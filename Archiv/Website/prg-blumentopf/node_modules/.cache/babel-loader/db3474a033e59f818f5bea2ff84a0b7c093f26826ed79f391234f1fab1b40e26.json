{"ast":null,"code":"import HeaderComponent from './components/HeaderComponent.vue';\nimport CardComponent from './components/CardComponent.vue';\nimport SliderComponent from './components/SliderComponent.vue';\nimport TabulatorComponent from './components/TabulatorComponent.vue';\nimport SettingsComponent from './components/SettingsComponent.vue';\nexport default {\n  name: 'App',\n  components: {\n    HeaderComponent,\n    CardComponent,\n    SliderComponent,\n    TabulatorComponent,\n    SettingsComponent\n  },\n  data() {\n    return {\n      showSettings: false,\n      profiles: null,\n      potData: null,\n      selectedPlant: null,\n      activeProfile: null,\n      dbUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/db.json\",\n      potUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/prototyp.json\",\n      testData: {\n        username: \"example\"\n      }\n    };\n  },\n  methods: {\n    toggleSettings() {\n      this.showSettings = !this.showSettings;\n    },\n    updatePlant(newPlant) {\n      this.selectedPlant = newPlant;\n      this.setActiveProfile();\n    },\n    uploadJson() {\n      console.log(\"UPLOAD!!!\");\n      console.log(this.profiles);\n      console.log(this.testData);\n      console.log(JSON.stringify(this.testData));\n      fetch(\"https://cloudleo.duckdns.org/Blumentopf/Database/uploadTest.json\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.testData)\n      }).then(res => res.JSON()).catch(err => console.log(err.message));\n    },\n    setProfiles() {\n      fetch(this.dbUrl).then(res => res.json()).then(data => {\n        this.profiles = data;\n        this.setActiveProfile();\n      }).catch(err => console.log(err.message));\n    },\n    setActiveProfile() {\n      this.activeProfile = this.profiles[this.selectedPlant];\n    }\n  },\n  mounted() {\n    fetch(this.potUrl).then(res => res.json()).then(data => {\n      this.potData = data;\n      this.selectedPlant = this.potData.profile;\n      this.setProfiles();\n    }).catch(err => console.log(err.message));\n  }\n};","map":{"version":3,"names":["HeaderComponent","CardComponent","SliderComponent","TabulatorComponent","SettingsComponent","name","components","data","showSettings","profiles","potData","selectedPlant","activeProfile","dbUrl","potUrl","testData","username","methods","toggleSettings","updatePlant","newPlant","setActiveProfile","uploadJson","console","log","JSON","stringify","fetch","method","headers","body","then","res","catch","err","message","setProfiles","json","mounted","profile"],"sources":["C:\\Users\\Dave\\prg-blumentopf\\src\\App.vue"],"sourcesContent":["<template>\n  <div v-if=\"showSettings\">\n    <SettingsComponent @closeSettings=\"toggleSettings\" @updatePlant=\"updatePlant\" :plant=\"selectedPlant\" :profiles=\"profiles\"></SettingsComponent>\n  </div>\n\n  <div v-else-if=\"potData && activeProfile\">\n    <HeaderComponent @openSettings=\"toggleSettings\" :title=\"activeProfile ? activeProfile.name : ''\" type=\"pageHeader\" />\n\n    <CardComponent>\n      <HeaderComponent title=\"Aktuelle Werte:\" type=\"cardHeader\" />\n      <ul>\n        <li v-for=\"(sensor, index) in potData.sensors\" :key=\"index\">\n          <SliderComponent :title=\"sensor.name\" :value=\"sensor.log[sensor.log.length - 1]\" :unit=\"sensor.unit\" :boundaries=\"activeProfile.boundaries[index]\"></SliderComponent>\n        </li>\n      </ul>\n    </CardComponent>\n\n    <CardComponent>\n      <HeaderComponent title=\"Statistik:\" type=\"cardHeader\" />\n      <TabulatorComponent :sensors=\"potData.sensors\"></TabulatorComponent>\n    </CardComponent>\n\n    <CardComponent>\n      <button @click=\"uploadJson\">JSON Push</button>\n    </CardComponent>\n  </div>\n</template>\n\n<script>\n\nimport HeaderComponent from './components/HeaderComponent.vue'\nimport CardComponent from './components/CardComponent.vue'\nimport SliderComponent from './components/SliderComponent.vue'\nimport TabulatorComponent from './components/TabulatorComponent.vue'\nimport SettingsComponent from './components/SettingsComponent.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HeaderComponent,\n    CardComponent,\n    SliderComponent,\n    TabulatorComponent,\n    SettingsComponent\n},\n  data() {\n    return {\n      showSettings: false,\n      profiles: null,\n      potData: null,\n      selectedPlant: null,\n      activeProfile: null,\n      dbUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/db.json\",\n      potUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/prototyp.json\",\n      testData: { username: \"example\" }\n    }\n  },\n  methods: {\n    toggleSettings() {\n      this.showSettings = !this.showSettings\n    },\n    updatePlant(newPlant) {\n      this.selectedPlant = newPlant\n      this.setActiveProfile()\n    },\n    uploadJson() {\n\n      console.log(\"UPLOAD!!!\")\n      console.log(this.profiles)\n      console.log(this.testData)\n      console.log(JSON.stringify(this.testData))\n\n      fetch(\"https://cloudleo.duckdns.org/Blumentopf/Database/uploadTest.json\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(this.testData)\n      })\n      .then(res => res.JSON())\n      .catch(err => console.log(err.message))\n\n    },\n    setProfiles() {\n      fetch(this.dbUrl)\n        .then(res => res.json())\n        .then(data => {\n          this.profiles = data\n          this.setActiveProfile()\n        })\n        .catch(err => console.log(err.message))\n    },\n    setActiveProfile() {\n      this.activeProfile = this.profiles[this.selectedPlant]\n    }\n  },\n  mounted() {\n    fetch(this.potUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.potData = data\n        this.selectedPlant = this.potData.profile\n        this.setProfiles()\n      })\n      .catch(err => console.log(err.message))\n  }\n}\n</script>\n\n<style>\n#app {\n  --white: #ffffff;\n  --lightGrey: #cccccc;\n  --defaultGrey: #888888;\n  --darkGrey: #444444;\n  --black: #000000;\n  --primary: var(--pal10);\n  --primaryAlt: var(--pal8);\n  --secondary: var(--pal1);\n  --secondaryAlt: var(--pal3);\n  --statGood: #50d025;\n  --statOkay: #f0ed11;\n  --statAlert: #f57913;\n  --statWarning: #d82816;\n\n  --pal1: #582F0E;\n  --pal2: #7F4F24;\n  --pal3: #936639;\n  --pal4: #A68A64;\n  --pal5: #B6AD90;\n  --pal6: #C2C5AA;\n  --pal7: #A4AC86;\n  --pal8: #656D4A;\n  --pal9: #414833;\n  --pal10: #333D29;\n\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--pal6);\n}\n\nul {\n  margin: 0;\n  padding: 0;\n}\n\nli {\n  list-style-type: none;\n}\n</style>\n"],"mappings":"AA8BA,OAAOA,eAAc,MAAO,kCAAiC;AAC7D,OAAOC,aAAY,MAAO,gCAA+B;AACzD,OAAOC,eAAc,MAAO,kCAAiC;AAC7D,OAAOC,kBAAiB,MAAO,qCAAoC;AACnE,OAAOC,iBAAgB,MAAO,oCAAmC;AAEjE,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVN,eAAe;IACfC,aAAa;IACbC,eAAe;IACfC,kBAAkB;IAClBC;EACJ,CAAC;EACCG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE,IAAI;MACbC,aAAa,EAAE,IAAI;MACnBC,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE,0DAA0D;MACjEC,MAAM,EAAE,gEAAgE;MACxEC,QAAQ,EAAE;QAAEC,QAAQ,EAAE;MAAU;IAClC;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACV,YAAW,GAAI,CAAC,IAAI,CAACA,YAAW;IACvC,CAAC;IACDW,WAAWA,CAACC,QAAQ,EAAE;MACpB,IAAI,CAACT,aAAY,GAAIS,QAAO;MAC5B,IAAI,CAACC,gBAAgB,CAAC;IACxB,CAAC;IACDC,UAAUA,CAAA,EAAG;MAEXC,OAAO,CAACC,GAAG,CAAC,WAAW;MACvBD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,QAAQ;MACzBc,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,QAAQ;MACzBQ,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,QAAQ,CAAC;MAEzCY,KAAK,CAAC,kEAAkE,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,QAAQ;MACpC,CAAC,EACAgB,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACP,IAAI,CAAC,CAAC,EACtBQ,KAAK,CAACC,GAAE,IAAKX,OAAO,CAACC,GAAG,CAACU,GAAG,CAACC,OAAO,CAAC;IAExC,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZT,KAAK,CAAC,IAAI,CAACd,KAAK,EACbkB,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACK,IAAI,CAAC,CAAC,EACtBN,IAAI,CAACxB,IAAG,IAAK;QACZ,IAAI,CAACE,QAAO,GAAIF,IAAG;QACnB,IAAI,CAACc,gBAAgB,CAAC;MACxB,CAAC,EACAY,KAAK,CAACC,GAAE,IAAKX,OAAO,CAACC,GAAG,CAACU,GAAG,CAACC,OAAO,CAAC;IAC1C,CAAC;IACDd,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACT,aAAY,GAAI,IAAI,CAACH,QAAQ,CAAC,IAAI,CAACE,aAAa;IACvD;EACF,CAAC;EACD2B,OAAOA,CAAA,EAAG;IACRX,KAAK,CAAC,IAAI,CAACb,MAAM,EACdiB,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACK,IAAI,CAAC,CAAC,EACtBN,IAAI,CAACxB,IAAG,IAAK;MACZ,IAAI,CAACG,OAAM,GAAIH,IAAG;MAClB,IAAI,CAACI,aAAY,GAAI,IAAI,CAACD,OAAO,CAAC6B,OAAM;MACxC,IAAI,CAACH,WAAW,CAAC;IACnB,CAAC,EACAH,KAAK,CAACC,GAAE,IAAKX,OAAO,CAACC,GAAG,CAACU,GAAG,CAACC,OAAO,CAAC;EAC1C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}