{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SettingsComponent = _resolveComponent(\"SettingsComponent\");\n  const _component_HeaderComponent = _resolveComponent(\"HeaderComponent\");\n  const _component_SliderComponent = _resolveComponent(\"SliderComponent\");\n  const _component_CardComponent = _resolveComponent(\"CardComponent\");\n  const _component_TabulatorComponent = _resolveComponent(\"TabulatorComponent\");\n  return $data.showSettings ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_SettingsComponent, {\n    onCloseSettings: $options.toggleSettings,\n    onUpdatePlant: $options.updatePlant,\n    onUpdateName: $options.updateName,\n    plant: $data.selectedPlant,\n    potName: this.potData.name,\n    profiles: $data.profiles\n  }, null, 8, [\"onCloseSettings\", \"onUpdatePlant\", \"onUpdateName\", \"plant\", \"potName\", \"profiles\"])])) : $data.potData && $data.activeProfile ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_HeaderComponent, {\n    onOpenSettings: $options.toggleSettings,\n    title: $data.activeProfile ? $data.activeProfile.name : '',\n    type: \"pageHeader\"\n  }, null, 8, [\"onOpenSettings\", \"title\"]), _createVNode(_component_CardComponent, null, {\n    default: _withCtx(() => [_createVNode(_component_HeaderComponent, {\n      title: \"Aktuelle Werte:\",\n      type: \"cardHeader\"\n    }), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.potData.sensors, (sensor, index) => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: index\n      }, [_createVNode(_component_SliderComponent, {\n        title: sensor.name,\n        value: sensor.log[sensor.log.length - 1],\n        unit: sensor.unit,\n        boundaries: $data.activeProfile.boundaries[index]\n      }, null, 8, [\"title\", \"value\", \"unit\", \"boundaries\"])]);\n    }), 128))])]),\n    _: 1\n  }), _createVNode(_component_CardComponent, null, {\n    default: _withCtx(() => [_createVNode(_component_HeaderComponent, {\n      title: \"Statistik:\",\n      type: \"cardHeader\"\n    }), _createVNode(_component_TabulatorComponent, {\n      sensors: $data.potData.sensors\n    }, null, 8, [\"sensors\"])]),\n    _: 1\n  })])) : _createCommentVNode(\"\", true);\n}","map":{"version":3,"names":["$data","showSettings","_createElementBlock","_hoisted_1","_createVNode","_component_SettingsComponent","onCloseSettings","$options","toggleSettings","onUpdatePlant","updatePlant","onUpdateName","updateName","plant","selectedPlant","potName","potData","name","profiles","activeProfile","_hoisted_2","_component_HeaderComponent","onOpenSettings","title","type","_component_CardComponent","_createElementVNode","_Fragment","_renderList","sensors","sensor","index","key","_component_SliderComponent","value","log","length","unit","boundaries","_component_TabulatorComponent"],"sources":["C:\\Users\\Dave\\prg-blumentopf\\src\\App.vue"],"sourcesContent":["<template>\n  <div v-if=\"showSettings\">\n    <SettingsComponent @closeSettings=\"toggleSettings\" @updatePlant=\"updatePlant\" @updateName=\"updateName\"\n    :plant=\"selectedPlant\" :potName=\"this.potData.name\" :profiles=\"profiles\"></SettingsComponent>\n  </div>\n\n  <div v-else-if=\"potData && activeProfile\">\n    <HeaderComponent @openSettings=\"toggleSettings\" :title=\"activeProfile ? activeProfile.name : ''\" type=\"pageHeader\" />\n\n    <CardComponent>\n      <HeaderComponent title=\"Aktuelle Werte:\" type=\"cardHeader\" />\n      <ul>\n        <li v-for=\"(sensor, index) in potData.sensors\" :key=\"index\">\n          <SliderComponent :title=\"sensor.name\" :value=\"sensor.log[sensor.log.length - 1]\" :unit=\"sensor.unit\" :boundaries=\"activeProfile.boundaries[index]\"></SliderComponent>\n        </li>\n      </ul>\n    </CardComponent>\n\n    <CardComponent>\n      <HeaderComponent title=\"Statistik:\" type=\"cardHeader\" />\n      <TabulatorComponent :sensors=\"potData.sensors\"></TabulatorComponent>\n    </CardComponent>\n  </div>\n</template>\n\n<script>\n\nimport HeaderComponent from './components/HeaderComponent.vue'\nimport CardComponent from './components/CardComponent.vue'\nimport SliderComponent from './components/SliderComponent.vue'\nimport TabulatorComponent from './components/TabulatorComponent.vue'\nimport SettingsComponent from './components/SettingsComponent.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HeaderComponent,\n    CardComponent,\n    SliderComponent,\n    TabulatorComponent,\n    SettingsComponent\n},\n  data() {\n    return {\n      showSettings: false,\n      profiles: null,\n      potData: null,\n      selectedPlant: null,\n      activeProfile: null,\n      dbUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/db.json\",\n      potUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/prototyp.json\",\n      apiUrl: \"https://cloudleo.duckdns.org/Blumentopf/Database/api.php\",\n    }\n  },\n  methods: {\n    toggleSettings() {\n      this.showSettings = !this.showSettings\n    },\n    updatePlant(newPlant) {\n      this.selectedPlant = newPlant\n      this.setActiveProfile()\n      this.potData.profile = this.selectedPlant\n      this.writeToJson(this.potData)\n    },\n    updateName(newName) {\n      this.potData.name = newName\n      this.writeToJson(this.potData)\n    },\n    writeToJson(data) {\n\n      console.log(\"Updating Json...\")\n      data = JSON.stringify(data)\n\n      fetch(this.apiUrl, {\n        method: \"POST\",\n        body: data\n      })\n      .then(res => res.json())\n      .then(data => console.log(data.message))\n      .catch(err => console.log(err.message))\n\n    },\n    setProfiles() {\n      fetch(this.dbUrl)\n        .then(res => res.json())\n        .then(data => {\n          this.profiles = data\n          this.setActiveProfile()\n        })\n        .catch(err => console.log(err.message))\n    },\n    setActiveProfile() {\n      this.activeProfile = this.profiles[this.selectedPlant]\n    }\n  },\n  mounted() {\n    fetch(this.potUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.potData = data\n        this.selectedPlant = this.potData.profile\n        this.setProfiles()\n      })\n      .catch(err => console.log(err.message))\n  }\n}\n</script>\n\n<style>\n#app {\n  --white: #ffffff;\n  --lightGrey: #cccccc;\n  --defaultGrey: #888888;\n  --darkGrey: #444444;\n  --black: #000000;\n  --primary: var(--pal10);\n  --primaryAlt: var(--pal8);\n  --secondary: var(--pal1);\n  --secondaryAlt: var(--pal3);\n  --statGood: #50d025;\n  --statOkay: #f0ed11;\n  --statAlert: #f57913;\n  --statWarning: #d82816;\n\n  --pal1: #582F0E;\n  --pal2: #7F4F24;\n  --pal3: #936639;\n  --pal4: #A68A64;\n  --pal5: #B6AD90;\n  --pal6: #C2C5AA;\n  --pal7: #A4AC86;\n  --pal8: #656D4A;\n  --pal9: #414833;\n  --pal10: #333D29;\n\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--pal6);\n}\n\nul {\n  margin: 0;\n  padding: 0;\n}\n\nli {\n  list-style-type: none;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;SACaA,KAAA,CAAAC,YAAY,I,cAAvBC,mBAAA,CAGM,OAAAC,UAAA,GAFJC,YAAA,CAC6FC,4BAAA;IADzEC,eAAa,EAAEC,QAAA,CAAAC,cAAc;IAAGC,aAAW,EAAEF,QAAA,CAAAG,WAAW;IAAGC,YAAU,EAAEJ,QAAA,CAAAK,UAAU;IACpGC,KAAK,EAAEb,KAAA,CAAAc,aAAa;IAAGC,OAAO,OAAOC,OAAO,CAACC,IAAI;IAAGC,QAAQ,EAAElB,KAAA,CAAAkB;yGAGjDlB,KAAA,CAAAgB,OAAO,IAAIhB,KAAA,CAAAmB,aAAa,I,cAAxCjB,mBAAA,CAgBM,OAAAkB,UAAA,GAfJhB,YAAA,CAAqHiB,0BAAA;IAAnGC,cAAY,EAAEf,QAAA,CAAAC,cAAc;IAAGe,KAAK,EAAEvB,KAAA,CAAAmB,aAAa,GAAGnB,KAAA,CAAAmB,aAAa,CAACF,IAAI;IAAOO,IAAI,EAAC;4CAEtGpB,YAAA,CAOgBqB,wBAAA;sBANd,MAA6D,CAA7DrB,YAAA,CAA6DiB,0BAAA;MAA5CE,KAAK,EAAC,iBAAiB;MAACC,IAAI,EAAC;QAC9CE,mBAAA,CAIK,c,kBAHHxB,mBAAA,CAEKyB,SAAA,QAAAC,WAAA,CAFyB5B,KAAA,CAAAgB,OAAO,CAACa,OAAO,GAAjCC,MAAM,EAAEC,KAAK;2BAAzB7B,mBAAA,CAEK;QAF2C8B,GAAG,EAAED;MAAK,IACxD3B,YAAA,CAAqK6B,0BAAA;QAAnJV,KAAK,EAAEO,MAAM,CAACb,IAAI;QAAGiB,KAAK,EAAEJ,MAAM,CAACK,GAAG,CAACL,MAAM,CAACK,GAAG,CAACC,MAAM;QAAQC,IAAI,EAAEP,MAAM,CAACO,IAAI;QAAGC,UAAU,EAAEtC,KAAA,CAAAmB,aAAa,CAACmB,UAAU,CAACP,KAAK;;;;MAKtJ3B,YAAA,CAGgBqB,wBAAA;sBAFd,MAAwD,CAAxDrB,YAAA,CAAwDiB,0BAAA;MAAvCE,KAAK,EAAC,YAAY;MAACC,IAAI,EAAC;QACzCpB,YAAA,CAAoEmC,6BAAA;MAA/CV,OAAO,EAAE7B,KAAA,CAAAgB,OAAO,CAACa"},"metadata":{},"sourceType":"module","externalDependencies":[]}